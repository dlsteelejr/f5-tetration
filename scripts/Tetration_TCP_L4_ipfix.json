{
    "apiAnonymous": "when RULE_INIT {\n  set static::http_rule1_dest \"\"\n  set static::http_rule1_tmplt \"\"\n}\n\n\n# CLIENT_ACCEPTED event to initiate IPFIX destination and template\nwhen CLIENT_ACCEPTED {\n  set start [clock clicks -milliseconds]\n  if { $static::http_rule1_dest == \"\"} {\n    # open the logging destination if it has not been opened yet\n    set static::http_rule1_dest [IPFIX::destination open -publisher /Common/ipfix-pub-1]\n  }\n  if { $static::http_rule1_tmplt == \"\"} {\n    # if the template has not been created yet, create the template\n    set static::http_rule1_tmplt [IPFIX::template create \"flowStartMilliseconds \\\n                                                          sourceIPv4Address \\\n                                                          sourceIPv6Address  \\\n                                                          destinationIPv4Address \\\n                                                          destinationIPv6Address  \\\n                                                          sourceTransportPort \\\n                                                          destinationTransportPort \\\n                                                          protocolIdentifier \\\n                                                          octetTotalCount \\\n                                                          packetTotalCount \\\n                                                          octetDeltaCount \\\n                                                          packetDeltaCount \\\n                                                          postNATSourceIPv4Address \\\n                                                          postNATSourceIPv6Address  \\\n                                                          postNATDestinationIPv4Address \\\n                                                          postNATDestinationIPv6Address  \\\n                                                          postNAPTSourceTransportPort \\\n                                                          postNAPTDestinationTransportPort \\\n                                                          postOctetTotalCount \\\n                                                          postPacketTotalCount \\\n                                                          postOctetDeltaCount \\\n                                                          postPacketDeltaCount \\\n                                                          flowEndMilliseconds \\ \"]\n                                                          \n  }\n  set rule1_msg1 [IPFIX::msg create $static::http_rule1_tmplt]\n}\n\n# SERVER_CONNECTED event to initiate flow data to Tetration and populate 5 tuples\nwhen SERVER_CONNECTED {\n  set client_closed_flag 0\n  set server_closed_flag 0\n  IPFIX::msg set $rule1_msg1 flowStartMilliseconds $start\n  IPFIX::msg set $rule1_msg1 protocolIdentifier [IP::protocol]\n  \n  # Clientside\n  if { [clientside {IP::version}] equals \"4\" } {\n    # Client IPv4 address\n    IPFIX::msg set $rule1_msg1 sourceIPv4Address [IP::client_addr]\n    # BIG-IP IPv4 VIP address\n    IPFIX::msg set $rule1_msg1 destinationIPv4Address [clientside {IP::local_addr}]\n  } else {\n    # Client IPv6 address\n    IPFIX::msg set $rule1_msg1 sourceIPv6Address [IP::client_addr]\n    # BIG-IP IPv6 VIP address\n    IPFIX::msg set $rule1_msg1 destinationIPv6Address [clientside {IP::local_addr}]\n  }\n  # Client port\n  IPFIX::msg set $rule1_msg1 sourceTransportPort [TCP::client_port]\n  # BIG-IP VIP port\n  IPFIX::msg set $rule1_msg1 destinationTransportPort [clientside {TCP::local_port}]\n\n  # Serverside\n  if { [serverside {IP::version}] equals \"4\" } {\n    # BIG-IP IPv4 self IP address\n    IPFIX::msg set $rule1_msg1 postNATSourceIPv4Address [IP::local_addr]\n    # Server IPv4 IP address\n    IPFIX::msg set $rule1_msg1 postNATDestinationIPv4Address [IP::server_addr]\n  } else {\n    # BIG-IP IPv6 self IP address\n    IPFIX::msg set $rule1_msg1 postNATSourceIPv6Address [IP::local_addr]\n    # Server IPv6 IP address\n    IPFIX::msg set $rule1_msg1 postNATDestinationIPv6Address [IP::server_addr]\n  }\n  # BIG-IP self IP port\n  IPFIX::msg set $rule1_msg1 postNAPTSourceTransportPort [TCP::local_port]\n  # Server port\n  IPFIX::msg set $rule1_msg1 postNAPTDestinationTransportPort [TCP::server_port]\n}\n \n# SERVER_CLOSED event to collect IP pkts and bytes count on serverside\nwhen SERVER_CLOSED {\n  set server_closed_flag 1\n  # when flow is completed, BIG-IP to server REQUEST pkts and bytes count\n  IPFIX::msg set $rule1_msg1 octetTotalCount [IP::stats bytes out]\n  IPFIX::msg set $rule1_msg1 packetTotalCount [IP::stats pkts out]\n  # when flow is completed, server to BIG-IP RESPONSE pkts and bytes count \n  IPFIX::msg set $rule1_msg1 octetDeltaCount [IP::stats bytes in]\n  IPFIX::msg set $rule1_msg1 packetDeltaCount [IP::stats pkts in]\n    IPFIX::destination send $static::http_rule1_dest $rule1_msg1\n}\n\n# CLIENT_CLOSED event to collect IP pkts and bytes count on clientside\nwhen CLIENT_CLOSED {\n  set client_closed_flag 1\n  # when flow is completed, client to BIG-IP REQUEST pkts and bytes octetDeltaCount\n  IPFIX::msg set $rule1_msg1 postOctetTotalCount [IP::stats bytes in]\n  IPFIX::msg set $rule1_msg1 postPacketTotalCount [IP::stats pkts in]\n  # when flow is completed, BIG-IP to client RESPONSE pkts and bytes count\n  IPFIX::msg set $rule1_msg1 postOctetDeltaCount [IP::stats bytes out]\n  IPFIX::msg set $rule1_msg1 postPacketDeltaCount [IP::stats pkts out]\n  # record the client closed time in ms\n  IPFIX::msg set $rule1_msg1 flowEndMilliseconds [clock click -milliseconds]\n    # send the IPFIX log\n    IPFIX::destination send $static::http_rule1_dest $rule1_msg1\n}",
    "fullPath": "/Common/Tetration_TCP_L4_ipfix",
    "generation": 132,
    "kind": "tm:ltm:rule:rulestate",
    "name": "Tetration_TCP_L4_ipfix",
    "partition": "Common",
    "selfLink": "https://localhost/mgmt/tm/ltm/rule/~Common~Tetration_TCP_L4_ipfix?ver=13.0.0"
}

